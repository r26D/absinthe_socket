{"version":3,"file":"index.js","sources":["../../src/notifier/cancel.js","../../src/notifier/observer/notifyAll.js","../../src/notifier/notifyCanceled.js","../../src/notifier/event/eventNames.js","../../src/notifier/event/eventCreators.js","../../src/notifier/flushCanceled.js","../../src/notifier/findIndex.js","../../src/notifier/refresh.js","../../src/notifier/remove.js","../../src/updateNotifiers.js","../../src/refreshNotifier.js","../../src/notifier/requestStatuses.js","../../src/notifier/notify.js","../../src/abortNotifier.js","../../src/notifier/find.js","../../src/notifier/notifyActive.js","../../src/notifier/notifyResultEvent.js","../../src/notifier/notifyStartEvent.js","../../src/notifier/reset.js","../../src/handlePush.js","../../src/pushAbsintheEvent.js","../../src/absinthe-event/absintheEventNames.js","../../src/absinthe-event/absintheEventCreators.js","../../src/pushRequestUsing.js","../../src/subscription.js","../../src/cancel.js","../../src/pushRequest.js","../../src/joinChannel.js","../../src/create.js","../../src/notifier/observe.js","../../src/observe.js","../../src/notifier/create.js","../../src/notifier/reactivate.js","../../src/send.js","../../src/toObservable.js","../../src/notifier/unobserve.js","../../src/unobserve.js","../../src/unobserveOrCancel.js"],"sourcesContent":["// @flow\n\nimport type {Notifier} from \"./types\";\n\nconst cancel = <Result, Variables: void | Object>({\n  activeObservers,\n  canceledObservers,\n  ...rest\n}: Notifier<Result, Variables>) => ({\n  ...rest,\n  isActive: false,\n  activeObservers: [],\n  canceledObservers: [...activeObservers, ...canceledObservers]\n});\n\nexport default cancel;\n","// @flow\n\nimport type {Event, Observer} from \"../types\";\n\nconst getNotifier = (handlerName, payload) => observer =>\n  observer[handlerName] && observer[handlerName](payload);\n\nconst getHandlerName = ({name}) => `on${name}`;\n\nconst notifyAll = <Result, Variables: void | Object>(\n  observers: $ReadOnlyArray<Observer<Result, Variables>>,\n  event: Event\n) => observers.forEach(getNotifier(getHandlerName(event), event.payload));\n\nexport default notifyAll;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyCanceled = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.canceledObservers, event);\n\n  return notifier;\n};\n\nexport default notifyCanceled;\n","// @flow\n\nconst eventNames = {\n  abort: (\"Abort\": \"Abort\"),\n  cancel: (\"Cancel\": \"Cancel\"),\n  error: (\"Error\": \"Error\"),\n  result: (\"Result\": \"Result\"),\n  start: (\"Start\": \"Start\")\n};\n\ntype EventName = $Values<typeof eventNames>;\n\nexport default eventNames;\n\nexport type {EventName};\n","// @flow\n\nimport eventNames from \"./eventNames\";\n\nimport type {\n  AbortEvent,\n  CancelEvent,\n  ErrorEvent,\n  Notifier,\n  ResultEvent,\n  StartEvent\n} from \"../types\";\n\nconst createStartEvent = <Payload: Notifier<any, any>>(\n  payload: Payload\n): StartEvent<Payload> => ({payload, name: eventNames.start});\n\nconst createResultEvent = <Result>(payload: Result): ResultEvent<Result> => ({\n  payload,\n  name: eventNames.result\n});\n\nconst createErrorEvent = (payload: Error): ErrorEvent => ({\n  payload,\n  name: eventNames.error\n});\n\nconst createCancelEvent = (): CancelEvent => ({\n  name: eventNames.cancel,\n  payload: undefined\n});\n\nconst createAbortEvent = (payload: Error): AbortEvent => ({\n  payload,\n  name: eventNames.abort\n});\n\nexport {\n  createStartEvent,\n  createResultEvent,\n  createErrorEvent,\n  createCancelEvent,\n  createAbortEvent\n};\n","// @flow\n\nimport notifyCanceled from \"./notifyCanceled\";\nimport {createCancelEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst clearCanceled = notifier => ({\n  ...notifier,\n  canceledObservers: []\n});\n\nconst flushCanceled = <Result: any, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  notifier.canceledObservers.length > 0\n    ? clearCanceled(notifyCanceled(notifier, createCancelEvent()))\n    : notifier;\n\nexport default flushCanceled;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst remove = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nconst requestStatuses = {\n  canceled: (\"canceled\": \"canceled\"),\n  canceling: (\"canceling\": \"canceling\"),\n  pending: (\"pending\": \"pending\"),\n  sent: (\"sent\": \"sent\"),\n  sending: (\"sending\": \"sending\")\n};\n\ntype RequestStatus = $Values<typeof requestStatuses>;\n\nexport default requestStatuses;\n\nexport type {RequestStatus};\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst getObservers = ({activeObservers, canceledObservers}) => [\n  ...activeObservers,\n  ...canceledObservers\n];\n\nconst notify = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(getObservers(notifier), event);\n\n  return notifier;\n};\n\nexport default notify;\n","// @flow\n\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbortEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst abortNotifier = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  error: Error\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierNotify(notifier, createAbortEvent(error)))\n  );\n\nexport default abortNotifier;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyActive = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.activeObservers, event);\n\n  return notifier;\n};\n\nexport default notifyActive;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createResultEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyResultEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  result: Result\n) => notifyActive(notifier, createResultEvent(result));\n\nexport default notifyResultEvent;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createStartEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyStartEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) => notifyActive(notifier, createStartEvent(notifier));\n\nexport default notifyStartEvent;\n","// @flow\n\nimport flushCanceled from \"./flushCanceled\";\nimport requestStatuses from \"./requestStatuses\";\n\nimport type {Notifier} from \"./types\";\n\nconst reset = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  flushCanceled({\n    ...notifier,\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  });\n\nexport default reset;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport handlePush from \"./handlePush\";\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheEvent} from \"./absinthe-event/types\";\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\n\nconst getPushHandlerMethodGetter = (absintheSocket, request) => handle => (\n  ...args\n) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst getPushHandler = (absintheSocket, request, notifierPushHandler) =>\n  map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n\nconst pushAbsintheEvent = <Variables: void | Object, Response: Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>,\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheEvent: AbsintheEvent\n) => {\n  handlePush(\n    absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload),\n    getPushHandler(absintheSocket, request, notifierPushHandler)\n  );\n\n  return absintheSocket;\n};\n\nexport default pushAbsintheEvent;\n","// @flow\n\nconst absintheEventNames = {\n  doc: (\"doc\": \"doc\"),\n  unsubscribe: (\"unsubscribe\": \"unsubscribe\")\n};\n\ntype AbsintheEventName = $Values<typeof absintheEventNames>;\n\nexport default absintheEventNames;\n\nexport type {AbsintheEventName};\n","// @flow\n\nimport absintheEventNames from \"./absintheEventNames\";\n\nimport type {AbsintheDocEvent, AbsintheUnsubscribeEvent} from \"./types\";\n\nconst createAbsintheUnsubscribeEvent = (\n  payload: $ElementType<AbsintheUnsubscribeEvent, \"payload\">\n): AbsintheUnsubscribeEvent => ({\n  payload,\n  name: absintheEventNames.unsubscribe\n});\n\nconst createAbsintheDocEvent = <Variables: void | Object>(\n  payload: $ElementType<AbsintheDocEvent<Variables>, \"payload\">\n): AbsintheDocEvent<Variables> => ({\n  payload,\n  name: absintheEventNames.doc\n});\n\nexport {createAbsintheDocEvent, createAbsintheUnsubscribeEvent};\n","// @flow\n\nimport {requestToCompat} from \"@jumpn/utils-graphql\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport {createAbsintheDocEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst pushAbsintheDocEvent = (absintheSocket, {request}, notifierPushHandler) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    notifierPushHandler,\n    createAbsintheDocEvent(requestToCompat(request))\n  );\n\nconst setNotifierRequestStatusSending = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sending\n  });\n\nconst createRequestError = message => new Error(`request: ${message}`);\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotifyActive(\n    notifier,\n    createErrorEvent(createRequestError(\"timeout\"))\n  );\n\nconst onError = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  errorMessage: string\n) => abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n\nconst getNotifierPushHandler = onSucceed => ({onError, onSucceed, onTimeout});\n\nconst pushRequestUsing = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  onSucceed: $ElementType<NotifierPushHandler<any>, \"onSucceed\">\n) =>\n  pushAbsintheDocEvent(\n    absintheSocket,\n    setNotifierRequestStatusSending(absintheSocket, notifier),\n    getNotifierPushHandler(onSucceed)\n  );\n\nexport {pushRequestUsing as default, onError};\n","// @flow\n\nimport {errorsToString as gqlErrorsToString} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierFind from \"./notifier/find\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierNotifyCanceled from \"./notifier/notifyCanceled\";\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport pushRequestUsing, {onError} from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbsintheUnsubscribeEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype SubscriptionPayload<Data> = {|\n  result: GqlResponse<Data>,\n  subscriptionId: string\n|};\n\n// TODO: improve this type\ntype UnsubscribeResponse = {};\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst onUnsubscribeSucceedCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifier))\n  );\n\nconst onUnsubscribeSucceedActive = (absintheSocket, notifier) =>\n  subscribe(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierReset(notifier))\n  );\n\nconst createUnsubscribeError = message => new Error(`unsubscribe: ${message}`);\n\nconst unsubscribeHandler: NotifierPushHandler<UnsubscribeResponse> = {\n  onError: (absintheSocket, notifier, errorMessage) =>\n    abortNotifier(\n      absintheSocket,\n      notifier,\n      createUnsubscribeError(errorMessage)\n    ),\n\n  onTimeout: (absintheSocket, notifier) =>\n    notifierNotifyCanceled(\n      notifier,\n      createErrorEvent(createUnsubscribeError(\"timeout\"))\n    ),\n\n  onSucceed: (absintheSocket, notifier) => {\n    if (notifier.isActive) {\n      onUnsubscribeSucceedActive(absintheSocket, notifier);\n    } else {\n      onUnsubscribeSucceedCanceled(absintheSocket, notifier);\n    }\n  }\n};\n\nconst pushAbsintheUnsubscribeEvent = (\n  absintheSocket,\n  {request, subscriptionId}\n) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    unsubscribeHandler,\n    createAbsintheUnsubscribeEvent({subscriptionId})\n  );\n\nconst unsubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) =>\n  pushAbsintheUnsubscribeEvent(\n    absintheSocket,\n    refreshNotifier(absintheSocket, {\n      ...notifier,\n      requestStatus: requestStatuses.canceling\n    })\n  );\n\nconst onSubscribeSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const subscribedNotifier = refreshNotifier(absintheSocket, {\n    ...notifier,\n    subscriptionId,\n    requestStatus: requestStatuses.sent\n  });\n\n  if (subscribedNotifier.isActive) {\n    notifierNotifyStartEvent(subscribedNotifier);\n  } else {\n    unsubscribe(absintheSocket, subscribedNotifier);\n  }\n};\n\nconst onSubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: SubscriptionResponse\n) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscribeSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst subscribe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => pushRequestUsing(absintheSocket, notifier, onSubscribe);\n\nconst onDataMessage = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotifyResultEvent(notifier, payload.result);\n  }\n};\n\nconst dataMessageEventName = \"subscription:data\";\n\nconst isDataMessage = (message: Message<>) =>\n  message.event === dataMessageEventName;\n\nexport {isDataMessage, onDataMessage, subscribe, unsubscribe};\n\nexport type {SubscriptionPayload};\n","// @flow\n\nimport notifierCancel from \"./notifier/cancel\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport notifierRemove from \"./notifier/remove\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {unsubscribe} from \"./subscription\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst cancelQueryOrMutationSending = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(notifierFlushCanceled(notifierCancel(notifier)))\n  );\n\nconst cancelQueryOrMutationIfSending = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.sending\n    ? cancelQueryOrMutationSending(absintheSocket, notifier)\n    : absintheSocket;\n\nconst cancelPending = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifierCancel(notifier)))\n  );\n\nconst cancelQueryOrMutation = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.pending\n    ? cancelPending(absintheSocket, notifier)\n    : cancelQueryOrMutationIfSending(absintheSocket, notifier);\n\nconst unsubscribeIfNeeded = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.sent\n    ? unsubscribe(absintheSocket, notifier)\n    : absintheSocket;\n\nconst cancelNonPendingSubscription = (absintheSocket, notifier) =>\n  unsubscribeIfNeeded(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierCancel(notifier))\n  );\n\nconst cancelSubscription = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.pending\n    ? cancelPending(absintheSocket, notifier)\n    : cancelNonPendingSubscription(absintheSocket, notifier);\n\nconst cancelActive = (absintheSocket, notifier) =>\n  notifier.operationType === \"subscription\"\n    ? cancelSubscription(absintheSocket, notifier)\n    : cancelQueryOrMutation(absintheSocket, notifier);\n\n/**\n * Cancels a notifier sending a Cancel event to all its observers and\n * unsubscribing in case it holds a subscription request\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.cancel(absintheSocket, notifier);\n */\nconst cancel = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n): AbsintheSocket =>\n  notifier.isActive ? cancelActive(absintheSocket, notifier) : absintheSocket;\n\nexport default cancel;\n","// @flow\n\nimport type {GqlResponse} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport pushRequestUsing from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {subscribe} from \"./subscription\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst setNotifierRequestStatusSent = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sent\n  });\n\nconst onQueryOrMutationSucceed = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: GqlResponse<any>\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(\n      notifierNotifyResultEvent(\n        setNotifierRequestStatusSent(absintheSocket, notifier),\n        response\n      )\n    )\n  );\n\nconst pushQueryOrMutation = (absintheSocket, notifier) =>\n  pushRequestUsing(\n    absintheSocket,\n    notifierNotifyStartEvent(notifier),\n    onQueryOrMutationSucceed\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    subscribe(absintheSocket, notifier);\n  } else {\n    pushQueryOrMutation(absintheSocket, notifier);\n  }\n};\n\nexport default pushRequest;\n","// @flow\n\nimport handlePush from \"./handlePush\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushRequest from \"./pushRequest\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\n\nconst createChannelJoinError = message => new Error(`channel join: ${message}`);\n\nconst notifyErrorToAllActive = (absintheSocket, errorMessage) =>\n  absintheSocket.notifiers.forEach(notifier =>\n    notifierNotifyActive(\n      notifier,\n      createErrorEvent(createChannelJoinError(errorMessage))\n    )\n  );\n\n// join Push is reused and so the handler\n// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356\nconst createChannelJoinHandler = absintheSocket => ({\n  onError: (errorMessage: string) =>\n    notifyErrorToAllActive(absintheSocket, errorMessage),\n\n  onSucceed: () =>\n    absintheSocket.notifiers.forEach(notifier =>\n      pushRequest(absintheSocket, notifier)\n    ),\n\n  onTimeout: () => notifyErrorToAllActive(absintheSocket, \"timeout\")\n});\n\nconst joinChannel = (absintheSocket: AbsintheSocket) => {\n  handlePush(\n    absintheSocket.channel.join(),\n    createChannelJoinHandler(absintheSocket)\n  );\n\n  absintheSocket.channelJoinCreated = true;\n\n  return absintheSocket;\n};\n\nexport default joinChannel;\n","// @flow\n\nimport {Socket as PhoenixSocket} from \"phoenix\";\n\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport joinChannel from \"./joinChannel\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport * as withSubscription from \"./subscription\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\n\nconst onMessage = absintheSocket => (message: Message<>) => {\n  if (withSubscription.isDataMessage(message)) {\n    withSubscription.onDataMessage(absintheSocket, message);\n  }\n};\n\nconst createConnectionCloseError = () => new Error(\"connection: close\");\n\nconst notifyConnectionCloseError = notifier =>\n  notifierNotify(notifier, createErrorEvent(createConnectionCloseError()));\n\nconst notifierOnConnectionCloseCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifyConnectionCloseError(notifier))\n  );\n\nconst notifierOnConnectionCloseActive = (absintheSocket, notifier) => {\n  if (notifier.operationType === \"mutation\") {\n    abortNotifier(absintheSocket, notifier, createConnectionCloseError());\n  } else {\n    refreshNotifier(\n      absintheSocket,\n      notifierReset(notifyConnectionCloseError(notifier))\n    );\n  }\n};\n\nconst notifierOnConnectionClose = absintheSocket => notifier => {\n  if (notifier.isActive) {\n    notifierOnConnectionCloseActive(absintheSocket, notifier);\n  } else {\n    notifierOnConnectionCloseCanceled(absintheSocket, notifier);\n  }\n};\n\nconst onConnectionClose = absintheSocket => () =>\n  absintheSocket.notifiers.forEach(notifierOnConnectionClose(absintheSocket));\n\nconst shouldJoinChannel = absintheSocket =>\n  !absintheSocket.channelJoinCreated && absintheSocket.notifiers.length > 0;\n\nconst onConnectionOpen = absintheSocket => () => {\n  if (shouldJoinChannel(absintheSocket)) {\n    joinChannel(absintheSocket);\n  }\n};\n\nconst absintheChannelName = \"__absinthe__:control\";\n\n/**\n * Creates an Absinthe Socket using the given Phoenix Socket instance\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n * import {Socket as PhoenixSocket} from \"phoenix\";\n\n * const absintheSocket = withAbsintheSocket.create(\n *   new PhoenixSocket(\"ws://localhost:4000/socket\")\n * );\n */\nconst create = (phoenixSocket: PhoenixSocket): AbsintheSocket => {\n  const absintheSocket: AbsintheSocket = {\n    phoenixSocket,\n    channel: phoenixSocket.channel(absintheChannelName),\n    channelJoinCreated: false,\n    notifiers: []\n  };\n\n  phoenixSocket.onOpen(onConnectionOpen(absintheSocket));\n  phoenixSocket.onClose(onConnectionClose(absintheSocket));\n  phoenixSocket.onMessage(onMessage(absintheSocket));\n\n  return absintheSocket;\n};\n\nexport default create;\n","// @flow\n\nimport type {Notifier, Observer} from \"./types\";\n\nconst observe = <Result, Variables: void | Object>(\n  {activeObservers, ...rest}: Notifier<Result, Variables>,\n  observer: Observer<Result, Variables>\n) => ({\n  ...rest,\n  activeObservers: [...activeObservers, observer],\n  isActive: true\n});\n\nexport default observe;\n","// @flow\n\nimport notifierObserve from \"./notifier/observe\";\nimport refreshNotifier from \"./refreshNotifier\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier, Observer} from \"./notifier/types\";\n\n/**\n * Observes given notifier using the provided observer\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\"\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const updatedNotifier = withAbsintheSocket.observe(absintheSocket, notifier, {\n *   onAbort: logEvent(\"abort\"),\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   onResult: logEvent(\"result\")\n * });\n */\nconst observe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>,\n  observer: Observer<Result, Variables>\n) => refreshNotifier(absintheSocket, notifierObserve(notifier, observer));\n\nexport default observe;\n","// @flow\n\nimport {getOperationType} from \"@jumpn/utils-graphql\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport requestStatuses from \"./requestStatuses\";\n\nimport type {Notifier} from \"./types\";\n\nconst createUsing = (request, operationType) => ({\n  operationType,\n  request,\n  activeObservers: [],\n  canceledObservers: [],\n  isActive: true,\n  requestStatus: requestStatuses.pending,\n  subscriptionId: undefined\n});\n\nconst create = <Variables: void | Object>(\n  request: GqlRequest<Variables>\n): Notifier<any, $Subtype<Variables>> =>\n  createUsing(request, getOperationType(request.operation));\n\nexport default create;\n","// @flow\n\nimport type {Notifier} from \"./types\";\n\nconst reactivate = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) => (notifier.isActive ? notifier : {...notifier, isActive: true});\n\nexport default reactivate;\n","// @flow\n\nimport {append} from \"@jumpn/utils-array\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport joinChannel from \"./joinChannel\";\nimport notifierCreate from \"./notifier/create\";\nimport notifierFind from \"./notifier/find\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierReactivate from \"./notifier/reactivate\";\nimport pushRequest from \"./pushRequest\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst connectOrJoinChannel = absintheSocket => {\n  if (absintheSocket.phoenixSocket.isConnected()) {\n    joinChannel(absintheSocket);\n  } else {\n    // socket ignores connect calls if a connection has already been created\n    absintheSocket.phoenixSocket.connect();\n  }\n};\n\nconst sendNew = (absintheSocket, request) => {\n  const notifier = notifierCreate(request);\n\n  updateNotifiers(absintheSocket, append([notifier]));\n\n  if (absintheSocket.channelJoinCreated) {\n    pushRequest(absintheSocket, notifier);\n  } else {\n    connectOrJoinChannel(absintheSocket);\n  }\n\n  return notifier;\n};\n\nconst updateCanceledReactivate = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, notifierReactivate(notifier));\n\nconst updateCanceled = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.sending\n    ? updateCanceledReactivate(absintheSocket, notifierFlushCanceled(notifier))\n    : updateCanceledReactivate(absintheSocket, notifier);\n\nconst updateIfCanceled = (absintheSocket, notifier) =>\n  notifier.isActive ? notifier : updateCanceled(absintheSocket, notifier);\n\nconst getExistentIfAny = (absintheSocket, request) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  return notifier && updateIfCanceled(absintheSocket, notifier);\n};\n\n/**\n * Sends given request and returns an object (notifier) to track its progress\n * (see observe function)\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * // This example uses a subscription, but the functionallity is the same for\n * // all operation types (queries, mutations and subscriptions)\n *\n * const notifier = withAbsintheSocket.send(absintheSocket, {\n *   operation,\n *   variables: {userId: 10}\n * });\n */\nconst send = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>\n): Notifier<Result, Variables> =>\n  getExistentIfAny(absintheSocket, request) || sendNew(absintheSocket, request);\n\nexport default send;\n","// @flow\n\nimport Observable from \"zen-observable\";\n\nimport notifierFind from \"./notifier/find\";\nimport observe from \"./observe\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier, Observer} from \"./notifier/types\";\n\ntype Options<Result, Variables: void | Object> = {|\n  onError: $ElementType<Observer<Result, Variables>, \"onError\">,\n  onStart: $ElementType<Observer<Result, Variables>, \"onStart\">,\n  unsubscribe: (\n    absintheSocket: AbsintheSocket,\n    notifier?: Notifier<Result, Variables>,\n    observer?: Observer<Result, Variables>\n  ) => void\n|};\n\n// prettier-ignore\nconst getUnsubscriber = (absintheSocket, {request}, observer, unsubscribe) =>\n  () => {\n    const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n    unsubscribe(absintheSocket, notifier, notifier ? observer: undefined);\n  };\n\nconst onResult = ({operationType}, observableObserver) => result => {\n  observableObserver.next(result);\n\n  if (operationType !== \"subscription\") {\n    observableObserver.complete();\n  }\n};\n\nconst createObserver = (notifier, handlers, observableObserver) => ({\n  ...handlers,\n  onAbort: observableObserver.error.bind(observableObserver),\n  onResult: onResult(notifier, observableObserver)\n});\n\n/**\n * Creates an Observable that will follow the given notifier\n *\n * @param {AbsintheSocket} absintheSocket\n * @param {Notifier<Result, Variables>} notifier\n * @param {Object} [options]\n * @param {function(error: Error): undefined} [options.onError]\n * @param {function(notifier: Notifier<Result, Variables>): undefined} [options.onStart]\n * @param {function(): undefined} [options.unsubscribe]\n *\n * @return {Observable}\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * const unobserveOrCancelIfNeeded = (absintheSocket, notifier, observer) => {\n *   if (notifier && observer) {\n *     withAbsintheSocket.unobserveOrCancel(absintheSocket, notifier, observer);\n *   }\n * };\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const observable = withAbsintheSocket.toObservable(absintheSocket, notifier, {\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   unsubscribe: unobserveOrCancelIfNeeded\n * });\n */\nconst toObservable = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>,\n  {unsubscribe, ...handlers}: $Shape<Options<Result, Variables>> = {}\n) =>\n  new Observable(observableObserver => {\n    const observer = createObserver(notifier, handlers, observableObserver);\n\n    observe(absintheSocket, notifier, observer);\n\n    return (\n      unsubscribe &&\n      getUnsubscriber(absintheSocket, notifier, observer, unsubscribe)\n    );\n  });\n\nexport default toObservable;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport type {Notifier, Observer} from \"./types\";\n\nconst removeObserver = (observers, observer) =>\n  arrayRemove(observers.indexOf(observer), 1, observers);\n\nconst unobserve = <Result, Variables: void | Object>(\n  {activeObservers, ...rest}: Notifier<Result, Variables>,\n  observer: Observer<Result, Variables>\n) => ({\n  ...rest,\n  activeObservers: removeObserver(activeObservers, observer)\n});\n\nexport default unobserve;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport notifierUnobserve from \"./notifier/unobserve\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier, Observer} from \"./notifier/types\";\n\nconst ensureHasActiveObserver = (notifier, observer) => {\n  if (notifier.activeObservers.includes(observer)) return notifier;\n\n  throw new Error(\"Observer is not attached to notifier\");\n};\n\n/**\n * Detaches observer from notifier\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.unobserve(absintheSocket, notifier, observer);\n */\nconst unobserve = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  observer: Observer<any, any>\n): AbsintheSocket =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(\n      notifierUnobserve(ensureHasActiveObserver(notifier, observer), observer)\n    )\n  );\n\nexport default unobserve;\n","// @flow\n\nimport cancel from \"./cancel\";\nimport unobserve from \"./unobserve\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier, Observer} from \"./notifier/types\";\n\nconst doUnobserveOrCancel = (absintheSocket, notifier, observer) =>\n  notifier.activeObservers.length === 1\n    ? cancel(absintheSocket, notifier)\n    : unobserve(absintheSocket, notifier, observer);\n\n/**\n * Cancels notifier if there are no more observers apart from the one given, or\n * detaches given observer from notifier otherwise\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.unobserve(absintheSocket, notifier, observer);\n */\nconst unobserveOrCancel = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>,\n  observer: Observer<Result, Variables>\n) =>\n  notifier.isActive\n    ? doUnobserveOrCancel(absintheSocket, notifier, observer)\n    : absintheSocket;\n\nexport default unobserveOrCancel;\n"],"names":["cancel","activeObservers","canceledObservers","rest","isActive","getNotifier","handlerName","payload","observer","getHandlerName","name","notifyAll","observers","event","forEach","notifyCanceled","notifier","observerNotifyAll","eventNames","abort","error","result","start","createStartEvent","createResultEvent","createErrorEvent","createCancelEvent","undefined","createAbortEvent","clearCanceled","flushCanceled","length","findIndex","notifiers","key","value","hasIn","refresh","arrayReplace","request","remove","arrayRemove","updateNotifiers","absintheSocket","updater","refreshNotifier","notifierRefresh","requestStatuses","canceled","canceling","pending","sent","sending","getObservers","notify","abortNotifier","notifierRemove","notifierNotify","find","notifyActive","notifyResultEvent","notifyStartEvent","reset","requestStatus","subscriptionId","handlePush","push","handler","receive","onSucceed","onError","onTimeout","getPushHandlerMethodGetter","handle","notifierFind","args","getPushHandler","notifierPushHandler","map","pushAbsintheEvent","absintheEvent","channel","absintheEventNames","doc","unsubscribe","createAbsintheUnsubscribeEvent","createAbsintheDocEvent","pushAbsintheDocEvent","requestToCompat","setNotifierRequestStatusSending","createRequestError","message","Error","notifierNotifyActive","errorMessage","getNotifierPushHandler","pushRequestUsing","onUnsubscribeSucceedCanceled","notifierFlushCanceled","onUnsubscribeSucceedActive","subscribe","notifierReset","createUnsubscribeError","unsubscribeHandler","notifierNotifyCanceled","pushAbsintheUnsubscribeEvent","onSubscribeSucceed","subscribedNotifier","notifierNotifyStartEvent","onSubscribe","response","errors","gqlErrorsToString","onDataMessage","notifierNotifyResultEvent","dataMessageEventName","isDataMessage","cancelQueryOrMutationSending","notifierCancel","cancelQueryOrMutationIfSending","cancelPending","cancelQueryOrMutation","unsubscribeIfNeeded","cancelNonPendingSubscription","cancelSubscription","cancelActive","operationType","setNotifierRequestStatusSent","onQueryOrMutationSucceed","pushQueryOrMutation","pushRequest","createChannelJoinError","notifyErrorToAllActive","createChannelJoinHandler","joinChannel","join","channelJoinCreated","onMessage","withSubscription","createConnectionCloseError","notifyConnectionCloseError","notifierOnConnectionCloseCanceled","notifierOnConnectionCloseActive","notifierOnConnectionClose","onConnectionClose","shouldJoinChannel","onConnectionOpen","absintheChannelName","create","phoenixSocket","onOpen","onClose","observe","notifierObserve","createUsing","getOperationType","operation","reactivate","connectOrJoinChannel","isConnected","connect","sendNew","notifierCreate","append","updateCanceledReactivate","notifierReactivate","updateCanceled","updateIfCanceled","getExistentIfAny","send","getUnsubscriber","onResult","observableObserver","next","complete","createObserver","handlers","onAbort","bind","toObservable","Observable","removeObserver","indexOf","unobserve","ensureHasActiveObserver","includes","notifierUnobserve","doUnobserveOrCancel","unobserveOrCancel"],"mappings":"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"}