{"version":3,"file":"cancel.js","sources":["../../src/notifier/cancel.js","../../src/notifier/observer/notifyAll.js","../../src/notifier/notifyCanceled.js","../../src/notifier/event/eventNames.js","../../src/notifier/event/eventCreators.js","../../src/notifier/flushCanceled.js","../../src/notifier/findIndex.js","../../src/notifier/refresh.js","../../src/notifier/remove.js","../../src/updateNotifiers.js","../../src/refreshNotifier.js","../../src/notifier/requestStatuses.js","../../src/notifier/notify.js","../../src/abortNotifier.js","../../src/notifier/find.js","../../src/notifier/notifyActive.js","../../src/notifier/notifyResultEvent.js","../../src/notifier/notifyStartEvent.js","../../src/notifier/reset.js","../../src/handlePush.js","../../src/pushAbsintheEvent.js","../../src/absinthe-event/absintheEventNames.js","../../src/absinthe-event/absintheEventCreators.js","../../src/pushRequestUsing.js","../../src/subscription.js","../../src/cancel.js"],"sourcesContent":["// @flow\n\nimport type {Notifier} from \"./types\";\n\nconst cancel = <Result, Variables: void | Object>({\n  activeObservers,\n  canceledObservers,\n  ...rest\n}: Notifier<Result, Variables>) => ({\n  ...rest,\n  isActive: false,\n  activeObservers: [],\n  canceledObservers: [...activeObservers, ...canceledObservers]\n});\n\nexport default cancel;\n","// @flow\n\nimport type {Event, Observer} from \"../types\";\n\nconst getNotifier = (handlerName, payload) => observer =>\n  observer[handlerName] && observer[handlerName](payload);\n\nconst getHandlerName = ({name}) => `on${name}`;\n\nconst notifyAll = <Result, Variables: void | Object>(\n  observers: $ReadOnlyArray<Observer<Result, Variables>>,\n  event: Event\n) => observers.forEach(getNotifier(getHandlerName(event), event.payload));\n\nexport default notifyAll;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyCanceled = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.canceledObservers, event);\n\n  return notifier;\n};\n\nexport default notifyCanceled;\n","// @flow\n\nconst eventNames = {\n  abort: (\"Abort\": \"Abort\"),\n  cancel: (\"Cancel\": \"Cancel\"),\n  error: (\"Error\": \"Error\"),\n  result: (\"Result\": \"Result\"),\n  start: (\"Start\": \"Start\")\n};\n\ntype EventName = $Values<typeof eventNames>;\n\nexport default eventNames;\n\nexport type {EventName};\n","// @flow\n\nimport eventNames from \"./eventNames\";\n\nimport type {\n  AbortEvent,\n  CancelEvent,\n  ErrorEvent,\n  Notifier,\n  ResultEvent,\n  StartEvent\n} from \"../types\";\n\nconst createStartEvent = <Payload: Notifier<any, any>>(\n  payload: Payload\n): StartEvent<Payload> => ({payload, name: eventNames.start});\n\nconst createResultEvent = <Result>(payload: Result): ResultEvent<Result> => ({\n  payload,\n  name: eventNames.result\n});\n\nconst createErrorEvent = (payload: Error): ErrorEvent => ({\n  payload,\n  name: eventNames.error\n});\n\nconst createCancelEvent = (): CancelEvent => ({\n  name: eventNames.cancel,\n  payload: undefined\n});\n\nconst createAbortEvent = (payload: Error): AbortEvent => ({\n  payload,\n  name: eventNames.abort\n});\n\nexport {\n  createStartEvent,\n  createResultEvent,\n  createErrorEvent,\n  createCancelEvent,\n  createAbortEvent\n};\n","// @flow\n\nimport notifyCanceled from \"./notifyCanceled\";\nimport {createCancelEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst clearCanceled = notifier => ({\n  ...notifier,\n  canceledObservers: []\n});\n\nconst flushCanceled = <Result: any, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  notifier.canceledObservers.length > 0\n    ? clearCanceled(notifyCanceled(notifier, createCancelEvent()))\n    : notifier;\n\nexport default flushCanceled;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst remove = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nconst requestStatuses = {\n  canceled: (\"canceled\": \"canceled\"),\n  canceling: (\"canceling\": \"canceling\"),\n  pending: (\"pending\": \"pending\"),\n  sent: (\"sent\": \"sent\"),\n  sending: (\"sending\": \"sending\")\n};\n\ntype RequestStatus = $Values<typeof requestStatuses>;\n\nexport default requestStatuses;\n\nexport type {RequestStatus};\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst getObservers = ({activeObservers, canceledObservers}) => [\n  ...activeObservers,\n  ...canceledObservers\n];\n\nconst notify = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(getObservers(notifier), event);\n\n  return notifier;\n};\n\nexport default notify;\n","// @flow\n\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbortEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst abortNotifier = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  error: Error\n) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierNotify(notifier, createAbortEvent(error)))\n  );\n\nexport default abortNotifier;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport observerNotifyAll from \"./observer/notifyAll\";\n\nimport type {Event, Notifier} from \"./types\";\n\nconst notifyActive = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  event: Event\n) => {\n  observerNotifyAll(notifier.activeObservers, event);\n\n  return notifier;\n};\n\nexport default notifyActive;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createResultEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyResultEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>,\n  result: Result\n) => notifyActive(notifier, createResultEvent(result));\n\nexport default notifyResultEvent;\n","// @flow\n\nimport notifyActive from \"./notifyActive\";\nimport {createStartEvent} from \"./event/eventCreators\";\n\nimport type {Notifier} from \"./types\";\n\nconst notifyStartEvent = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) => notifyActive(notifier, createStartEvent(notifier));\n\nexport default notifyStartEvent;\n","// @flow\n\nimport flushCanceled from \"./flushCanceled\";\nimport requestStatuses from \"./requestStatuses\";\n\nimport type {Notifier} from \"./types\";\n\nconst reset = <Result, Variables: void | Object>(\n  notifier: Notifier<Result, Variables>\n) =>\n  flushCanceled({\n    ...notifier,\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  });\n\nexport default reset;\n","// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport handlePush from \"./handlePush\";\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheEvent} from \"./absinthe-event/types\";\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\n\nconst getPushHandlerMethodGetter = (absintheSocket, request) => handle => (\n  ...args\n) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst getPushHandler = (absintheSocket, request, notifierPushHandler) =>\n  map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n\nconst pushAbsintheEvent = <Variables: void | Object, Response: Object>(\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<Variables>,\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheEvent: AbsintheEvent\n) => {\n  handlePush(\n    absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload),\n    getPushHandler(absintheSocket, request, notifierPushHandler)\n  );\n\n  return absintheSocket;\n};\n\nexport default pushAbsintheEvent;\n","// @flow\n\nconst absintheEventNames = {\n  doc: (\"doc\": \"doc\"),\n  unsubscribe: (\"unsubscribe\": \"unsubscribe\")\n};\n\ntype AbsintheEventName = $Values<typeof absintheEventNames>;\n\nexport default absintheEventNames;\n\nexport type {AbsintheEventName};\n","// @flow\n\nimport absintheEventNames from \"./absintheEventNames\";\n\nimport type {AbsintheDocEvent, AbsintheUnsubscribeEvent} from \"./types\";\n\nconst createAbsintheUnsubscribeEvent = (\n  payload: $ElementType<AbsintheUnsubscribeEvent, \"payload\">\n): AbsintheUnsubscribeEvent => ({\n  payload,\n  name: absintheEventNames.unsubscribe\n});\n\nconst createAbsintheDocEvent = <Variables: void | Object>(\n  payload: $ElementType<AbsintheDocEvent<Variables>, \"payload\">\n): AbsintheDocEvent<Variables> => ({\n  payload,\n  name: absintheEventNames.doc\n});\n\nexport {createAbsintheDocEvent, createAbsintheUnsubscribeEvent};\n","// @flow\n\nimport {requestToCompat} from \"@jumpn/utils-graphql\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierNotifyActive from \"./notifier/notifyActive\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport {createAbsintheDocEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst pushAbsintheDocEvent = (absintheSocket, {request}, notifierPushHandler) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    notifierPushHandler,\n    createAbsintheDocEvent(requestToCompat(request))\n  );\n\nconst setNotifierRequestStatusSending = (absintheSocket, notifier) =>\n  refreshNotifier(absintheSocket, {\n    ...notifier,\n    requestStatus: requestStatuses.sending\n  });\n\nconst createRequestError = message => new Error(`request: ${message}`);\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotifyActive(\n    notifier,\n    createErrorEvent(createRequestError(\"timeout\"))\n  );\n\nconst onError = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  errorMessage: string\n) => abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n\nconst getNotifierPushHandler = onSucceed => ({onError, onSucceed, onTimeout});\n\nconst pushRequestUsing = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  onSucceed: $ElementType<NotifierPushHandler<any>, \"onSucceed\">\n) =>\n  pushAbsintheDocEvent(\n    absintheSocket,\n    setNotifierRequestStatusSending(absintheSocket, notifier),\n    getNotifierPushHandler(onSucceed)\n  );\n\nexport {pushRequestUsing as default, onError};\n","// @flow\n\nimport {errorsToString as gqlErrorsToString} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\nimport type {Message} from \"phoenix\";\n\nimport abortNotifier from \"./abortNotifier\";\nimport notifierFind from \"./notifier/find\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierNotifyCanceled from \"./notifier/notifyCanceled\";\nimport notifierNotifyResultEvent from \"./notifier/notifyResultEvent\";\nimport notifierNotifyStartEvent from \"./notifier/notifyStartEvent\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierReset from \"./notifier/reset\";\nimport pushAbsintheEvent from \"./pushAbsintheEvent\";\nimport pushRequestUsing, {onError} from \"./pushRequestUsing\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {createAbsintheUnsubscribeEvent} from \"./absinthe-event/absintheEventCreators\";\nimport {createErrorEvent} from \"./notifier/event/eventCreators\";\n\nimport type {AbsintheSocket, NotifierPushHandler} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype SubscriptionPayload<Data> = {|\n  result: GqlResponse<Data>,\n  subscriptionId: string\n|};\n\n// TODO: improve this type\ntype UnsubscribeResponse = {};\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst onUnsubscribeSucceedCanceled = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifier))\n  );\n\nconst onUnsubscribeSucceedActive = (absintheSocket, notifier) =>\n  subscribe(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierReset(notifier))\n  );\n\nconst createUnsubscribeError = message => new Error(`unsubscribe: ${message}`);\n\nconst unsubscribeHandler: NotifierPushHandler<UnsubscribeResponse> = {\n  onError: (absintheSocket, notifier, errorMessage) =>\n    abortNotifier(\n      absintheSocket,\n      notifier,\n      createUnsubscribeError(errorMessage)\n    ),\n\n  onTimeout: (absintheSocket, notifier) =>\n    notifierNotifyCanceled(\n      notifier,\n      createErrorEvent(createUnsubscribeError(\"timeout\"))\n    ),\n\n  onSucceed: (absintheSocket, notifier) => {\n    if (notifier.isActive) {\n      onUnsubscribeSucceedActive(absintheSocket, notifier);\n    } else {\n      onUnsubscribeSucceedCanceled(absintheSocket, notifier);\n    }\n  }\n};\n\nconst pushAbsintheUnsubscribeEvent = (\n  absintheSocket,\n  {request, subscriptionId}\n) =>\n  pushAbsintheEvent(\n    absintheSocket,\n    request,\n    unsubscribeHandler,\n    createAbsintheUnsubscribeEvent({subscriptionId})\n  );\n\nconst unsubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n) =>\n  pushAbsintheUnsubscribeEvent(\n    absintheSocket,\n    refreshNotifier(absintheSocket, {\n      ...notifier,\n      requestStatus: requestStatuses.canceling\n    })\n  );\n\nconst onSubscribeSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const subscribedNotifier = refreshNotifier(absintheSocket, {\n    ...notifier,\n    subscriptionId,\n    requestStatus: requestStatuses.sent\n  });\n\n  if (subscribedNotifier.isActive) {\n    notifierNotifyStartEvent(subscribedNotifier);\n  } else {\n    unsubscribe(absintheSocket, subscribedNotifier);\n  }\n};\n\nconst onSubscribe = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>,\n  response: SubscriptionResponse\n) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscribeSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst subscribe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => pushRequestUsing(absintheSocket, notifier, onSubscribe);\n\nconst onDataMessage = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotifyResultEvent(notifier, payload.result);\n  }\n};\n\nconst dataMessageEventName = \"subscription:data\";\n\nconst isDataMessage = (message: Message<>) =>\n  message.event === dataMessageEventName;\n\nexport {isDataMessage, onDataMessage, subscribe, unsubscribe};\n\nexport type {SubscriptionPayload};\n","// @flow\n\nimport notifierCancel from \"./notifier/cancel\";\nimport notifierFlushCanceled from \"./notifier/flushCanceled\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport notifierRemove from \"./notifier/remove\";\nimport refreshNotifier from \"./refreshNotifier\";\nimport requestStatuses from \"./notifier/requestStatuses\";\nimport updateNotifiers from \"./updateNotifiers\";\nimport {unsubscribe} from \"./subscription\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst cancelQueryOrMutationSending = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRefresh(notifierFlushCanceled(notifierCancel(notifier)))\n  );\n\nconst cancelQueryOrMutationIfSending = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.sending\n    ? cancelQueryOrMutationSending(absintheSocket, notifier)\n    : absintheSocket;\n\nconst cancelPending = (absintheSocket, notifier) =>\n  updateNotifiers(\n    absintheSocket,\n    notifierRemove(notifierFlushCanceled(notifierCancel(notifier)))\n  );\n\nconst cancelQueryOrMutation = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.pending\n    ? cancelPending(absintheSocket, notifier)\n    : cancelQueryOrMutationIfSending(absintheSocket, notifier);\n\nconst unsubscribeIfNeeded = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.sent\n    ? unsubscribe(absintheSocket, notifier)\n    : absintheSocket;\n\nconst cancelNonPendingSubscription = (absintheSocket, notifier) =>\n  unsubscribeIfNeeded(\n    absintheSocket,\n    refreshNotifier(absintheSocket, notifierCancel(notifier))\n  );\n\nconst cancelSubscription = (absintheSocket, notifier) =>\n  notifier.requestStatus === requestStatuses.pending\n    ? cancelPending(absintheSocket, notifier)\n    : cancelNonPendingSubscription(absintheSocket, notifier);\n\nconst cancelActive = (absintheSocket, notifier) =>\n  notifier.operationType === \"subscription\"\n    ? cancelSubscription(absintheSocket, notifier)\n    : cancelQueryOrMutation(absintheSocket, notifier);\n\n/**\n * Cancels a notifier sending a Cancel event to all its observers and\n * unsubscribing in case it holds a subscription request\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.cancel(absintheSocket, notifier);\n */\nconst cancel = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any, any>\n): AbsintheSocket =>\n  notifier.isActive ? cancelActive(absintheSocket, notifier) : absintheSocket;\n\nexport default cancel;\n"],"names":["cancel","activeObservers","canceledObservers","rest","isActive","getNotifier","handlerName","payload","observer","getHandlerName","name","notifyAll","observers","event","forEach","notifyCanceled","notifier","observerNotifyAll","eventNames","abort","error","result","start","createStartEvent","createResultEvent","createErrorEvent","createCancelEvent","undefined","createAbortEvent","clearCanceled","flushCanceled","length","findIndex","notifiers","key","value","hasIn","refresh","arrayReplace","request","remove","arrayRemove","updateNotifiers","absintheSocket","updater","refreshNotifier","notifierRefresh","requestStatuses","canceled","canceling","pending","sent","sending","getObservers","notify","abortNotifier","notifierRemove","notifierNotify","find","notifyActive","notifyResultEvent","notifyStartEvent","reset","requestStatus","subscriptionId","handlePush","push","handler","receive","onSucceed","onError","onTimeout","getPushHandlerMethodGetter","handle","notifierFind","args","getPushHandler","notifierPushHandler","map","pushAbsintheEvent","absintheEvent","channel","absintheEventNames","doc","unsubscribe","createAbsintheUnsubscribeEvent","createAbsintheDocEvent","pushAbsintheDocEvent","requestToCompat","setNotifierRequestStatusSending","createRequestError","message","Error","notifierNotifyActive","errorMessage","getNotifierPushHandler","pushRequestUsing","onUnsubscribeSucceedCanceled","notifierFlushCanceled","onUnsubscribeSucceedActive","subscribe","notifierReset","createUnsubscribeError","unsubscribeHandler","notifierNotifyCanceled","pushAbsintheUnsubscribeEvent","onSubscribeSucceed","subscribedNotifier","notifierNotifyStartEvent","onSubscribe","response","errors","gqlErrorsToString","onDataMessage","notifierNotifyResultEvent","dataMessageEventName","isDataMessage","cancelQueryOrMutationSending","notifierCancel","cancelQueryOrMutationIfSending","cancelPending","cancelQueryOrMutation","unsubscribeIfNeeded","cancelNonPendingSubscription","cancelSubscription","cancelActive","operationType"],"mappings":"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"}