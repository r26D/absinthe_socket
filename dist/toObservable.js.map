{"version":3,"file":"toObservable.js","sources":["../src/notifier/find.js","../src/notifier/observe.js","../src/notifier/findIndex.js","../src/notifier/refresh.js","../src/updateNotifiers.js","../src/refreshNotifier.js","../src/observe.js","../src/toObservable.js"],"sourcesContent":["// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst find = (notifiers: Array<Notifier<any, any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport type {Notifier, Observer} from \"./types\";\n\nconst observe = <Result, Variables: void | Object>(\n  {activeObservers, ...rest}: Notifier<Result, Variables>,\n  observer: Observer<Result, Variables>\n) => ({\n  ...rest,\n  activeObservers: [...activeObservers, observer],\n  isActive: true\n});\n\nexport default observe;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"./types\";\n\nconst findIndex = (\n  notifiers: Array<Notifier<any, any>>,\n  key: string,\n  value: any\n) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"./types\";\n\nconst refresh = (notifier: Notifier<any, any>) => (\n  notifiers: Array<Notifier<any, any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\ntype Notifiers = Array<Notifier<any, any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier} from \"./notifier/types\";\n\nconst refreshNotifier = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>\n) => {\n  updateNotifiers(absintheSocket, notifierRefresh(notifier));\n\n  return notifier;\n};\n\nexport default refreshNotifier;\n","// @flow\n\nimport notifierObserve from \"./notifier/observe\";\nimport refreshNotifier from \"./refreshNotifier\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier, Observer} from \"./notifier/types\";\n\n/**\n * Observes given notifier using the provided observer\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\"\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const updatedNotifier = withAbsintheSocket.observe(absintheSocket, notifier, {\n *   onAbort: logEvent(\"abort\"),\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   onResult: logEvent(\"result\")\n * });\n */\nconst observe = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>,\n  observer: Observer<Result, Variables>\n) => refreshNotifier(absintheSocket, notifierObserve(notifier, observer));\n\nexport default observe;\n","// @flow\n\nimport Observable from \"zen-observable\";\n\nimport notifierFind from \"./notifier/find\";\nimport observe from \"./observe\";\n\nimport type {AbsintheSocket} from \"./types\";\nimport type {Notifier, Observer} from \"./notifier/types\";\n\ntype Options<Result, Variables: void | Object> = {|\n  onError: $ElementType<Observer<Result, Variables>, \"onError\">,\n  onStart: $ElementType<Observer<Result, Variables>, \"onStart\">,\n  unsubscribe: (\n    absintheSocket: AbsintheSocket,\n    notifier?: Notifier<Result, Variables>,\n    observer?: Observer<Result, Variables>\n  ) => void\n|};\n\n// prettier-ignore\nconst getUnsubscriber = (absintheSocket, {request}, observer, unsubscribe) =>\n  () => {\n    const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n    unsubscribe(absintheSocket, notifier, notifier ? observer: undefined);\n  };\n\nconst onResult = ({operationType}, observableObserver) => result => {\n  observableObserver.next(result);\n\n  if (operationType !== \"subscription\") {\n    observableObserver.complete();\n  }\n};\n\nconst createObserver = (notifier, handlers, observableObserver) => ({\n  ...handlers,\n  onAbort: observableObserver.error.bind(observableObserver),\n  onResult: onResult(notifier, observableObserver)\n});\n\n/**\n * Creates an Observable that will follow the given notifier\n *\n * @param {AbsintheSocket} absintheSocket\n * @param {Notifier<Result, Variables>} notifier\n * @param {Object} [options]\n * @param {function(error: Error): undefined} [options.onError]\n * @param {function(notifier: Notifier<Result, Variables>): undefined} [options.onStart]\n * @param {function(): undefined} [options.unsubscribe]\n *\n * @return {Observable}\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * const unobserveOrCancelIfNeeded = (absintheSocket, notifier, observer) => {\n *   if (notifier && observer) {\n *     withAbsintheSocket.unobserveOrCancel(absintheSocket, notifier, observer);\n *   }\n * };\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const observable = withAbsintheSocket.toObservable(absintheSocket, notifier, {\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   unsubscribe: unobserveOrCancelIfNeeded\n * });\n */\nconst toObservable = <Result, Variables: void | Object>(\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<Result, Variables>,\n  {unsubscribe, ...handlers}: $Shape<Options<Result, Variables>> = {}\n) =>\n  new Observable(observableObserver => {\n    const observer = createObserver(notifier, handlers, observableObserver);\n\n    observe(absintheSocket, notifier, observer);\n\n    return (\n      unsubscribe &&\n      getUnsubscriber(absintheSocket, notifier, observer, unsubscribe)\n    );\n  });\n\nexport default toObservable;\n"],"names":["find","notifiers","key","value","hasIn","observe","observer","activeObservers","rest","isActive","findIndex","refresh","notifier","arrayReplace","request","updateNotifiers","absintheSocket","updater","refreshNotifier","notifierRefresh","notifierObserve","getUnsubscriber","unsubscribe","notifierFind","undefined","onResult","observableObserver","operationType","result","next","complete","createObserver","handlers","onAbort","error","bind","toObservable","Observable"],"mappings":"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"}